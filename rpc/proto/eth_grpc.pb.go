// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: eth.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Eth_GetBlock_FullMethodName                 = "/rpc.Eth/GetBlock"
	Eth_GetBlockTransactionCount_FullMethodName = "/rpc.Eth/GetBlockTransactionCount"
	Eth_GetTransactionByHash_FullMethodName     = "/rpc.Eth/GetTransactionByHash"
	Eth_GetTransactionByIndex_FullMethodName    = "/rpc.Eth/GetTransactionByIndex"
	Eth_GetTransactionReceipt_FullMethodName    = "/rpc.Eth/GetTransactionReceipt"
	Eth_GetBlockReceipts_FullMethodName         = "/rpc.Eth/GetBlockReceipts"
	Eth_GetTransactionTraces_FullMethodName     = "/rpc.Eth/GetTransactionTraces"
	Eth_GetBlockTraces_FullMethodName           = "/rpc.Eth/GetBlockTraces"
	Eth_GetTrace_FullMethodName                 = "/rpc.Eth/GetTrace"
)

// EthClient is the client API for Eth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EthClient interface {
	GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*DataResponse, error)
	GetBlockTransactionCount(ctx context.Context, in *BlockId, opts ...grpc.CallOption) (*GetBlockTransactionCountResponse, error)
	GetTransactionByHash(ctx context.Context, in *TransactionId, opts ...grpc.CallOption) (*DataResponse, error)
	GetTransactionByIndex(ctx context.Context, in *GetTransactionByIndexRequest, opts ...grpc.CallOption) (*DataResponse, error)
	GetTransactionReceipt(ctx context.Context, in *TransactionId, opts ...grpc.CallOption) (*DataResponse, error)
	GetBlockReceipts(ctx context.Context, in *BlockId, opts ...grpc.CallOption) (*DataResponse, error)
	GetTransactionTraces(ctx context.Context, in *TransactionId, opts ...grpc.CallOption) (*DataResponse, error)
	GetBlockTraces(ctx context.Context, in *BlockId, opts ...grpc.CallOption) (*DataResponse, error)
	GetTrace(ctx context.Context, in *GetTraceRequest, opts ...grpc.CallOption) (*DataResponse, error)
}

type ethClient struct {
	cc grpc.ClientConnInterface
}

func NewEthClient(cc grpc.ClientConnInterface) EthClient {
	return &ethClient{cc}
}

func (c *ethClient) GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*DataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataResponse)
	err := c.cc.Invoke(ctx, Eth_GetBlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethClient) GetBlockTransactionCount(ctx context.Context, in *BlockId, opts ...grpc.CallOption) (*GetBlockTransactionCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBlockTransactionCountResponse)
	err := c.cc.Invoke(ctx, Eth_GetBlockTransactionCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethClient) GetTransactionByHash(ctx context.Context, in *TransactionId, opts ...grpc.CallOption) (*DataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataResponse)
	err := c.cc.Invoke(ctx, Eth_GetTransactionByHash_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethClient) GetTransactionByIndex(ctx context.Context, in *GetTransactionByIndexRequest, opts ...grpc.CallOption) (*DataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataResponse)
	err := c.cc.Invoke(ctx, Eth_GetTransactionByIndex_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethClient) GetTransactionReceipt(ctx context.Context, in *TransactionId, opts ...grpc.CallOption) (*DataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataResponse)
	err := c.cc.Invoke(ctx, Eth_GetTransactionReceipt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethClient) GetBlockReceipts(ctx context.Context, in *BlockId, opts ...grpc.CallOption) (*DataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataResponse)
	err := c.cc.Invoke(ctx, Eth_GetBlockReceipts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethClient) GetTransactionTraces(ctx context.Context, in *TransactionId, opts ...grpc.CallOption) (*DataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataResponse)
	err := c.cc.Invoke(ctx, Eth_GetTransactionTraces_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethClient) GetBlockTraces(ctx context.Context, in *BlockId, opts ...grpc.CallOption) (*DataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataResponse)
	err := c.cc.Invoke(ctx, Eth_GetBlockTraces_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethClient) GetTrace(ctx context.Context, in *GetTraceRequest, opts ...grpc.CallOption) (*DataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataResponse)
	err := c.cc.Invoke(ctx, Eth_GetTrace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EthServer is the server API for Eth service.
// All implementations must embed UnimplementedEthServer
// for forward compatibility.
type EthServer interface {
	GetBlock(context.Context, *GetBlockRequest) (*DataResponse, error)
	GetBlockTransactionCount(context.Context, *BlockId) (*GetBlockTransactionCountResponse, error)
	GetTransactionByHash(context.Context, *TransactionId) (*DataResponse, error)
	GetTransactionByIndex(context.Context, *GetTransactionByIndexRequest) (*DataResponse, error)
	GetTransactionReceipt(context.Context, *TransactionId) (*DataResponse, error)
	GetBlockReceipts(context.Context, *BlockId) (*DataResponse, error)
	GetTransactionTraces(context.Context, *TransactionId) (*DataResponse, error)
	GetBlockTraces(context.Context, *BlockId) (*DataResponse, error)
	GetTrace(context.Context, *GetTraceRequest) (*DataResponse, error)
	mustEmbedUnimplementedEthServer()
}

// UnimplementedEthServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEthServer struct{}

func (UnimplementedEthServer) GetBlock(context.Context, *GetBlockRequest) (*DataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (UnimplementedEthServer) GetBlockTransactionCount(context.Context, *BlockId) (*GetBlockTransactionCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockTransactionCount not implemented")
}
func (UnimplementedEthServer) GetTransactionByHash(context.Context, *TransactionId) (*DataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionByHash not implemented")
}
func (UnimplementedEthServer) GetTransactionByIndex(context.Context, *GetTransactionByIndexRequest) (*DataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionByIndex not implemented")
}
func (UnimplementedEthServer) GetTransactionReceipt(context.Context, *TransactionId) (*DataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionReceipt not implemented")
}
func (UnimplementedEthServer) GetBlockReceipts(context.Context, *BlockId) (*DataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockReceipts not implemented")
}
func (UnimplementedEthServer) GetTransactionTraces(context.Context, *TransactionId) (*DataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionTraces not implemented")
}
func (UnimplementedEthServer) GetBlockTraces(context.Context, *BlockId) (*DataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockTraces not implemented")
}
func (UnimplementedEthServer) GetTrace(context.Context, *GetTraceRequest) (*DataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrace not implemented")
}
func (UnimplementedEthServer) mustEmbedUnimplementedEthServer() {}
func (UnimplementedEthServer) testEmbeddedByValue()             {}

// UnsafeEthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EthServer will
// result in compilation errors.
type UnsafeEthServer interface {
	mustEmbedUnimplementedEthServer()
}

func RegisterEthServer(s grpc.ServiceRegistrar, srv EthServer) {
	// If the following call pancis, it indicates UnimplementedEthServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Eth_ServiceDesc, srv)
}

func _Eth_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Eth_GetBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthServer).GetBlock(ctx, req.(*GetBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Eth_GetBlockTransactionCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthServer).GetBlockTransactionCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Eth_GetBlockTransactionCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthServer).GetBlockTransactionCount(ctx, req.(*BlockId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Eth_GetTransactionByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthServer).GetTransactionByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Eth_GetTransactionByHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthServer).GetTransactionByHash(ctx, req.(*TransactionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Eth_GetTransactionByIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionByIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthServer).GetTransactionByIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Eth_GetTransactionByIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthServer).GetTransactionByIndex(ctx, req.(*GetTransactionByIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Eth_GetTransactionReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthServer).GetTransactionReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Eth_GetTransactionReceipt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthServer).GetTransactionReceipt(ctx, req.(*TransactionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Eth_GetBlockReceipts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthServer).GetBlockReceipts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Eth_GetBlockReceipts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthServer).GetBlockReceipts(ctx, req.(*BlockId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Eth_GetTransactionTraces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthServer).GetTransactionTraces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Eth_GetTransactionTraces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthServer).GetTransactionTraces(ctx, req.(*TransactionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Eth_GetBlockTraces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthServer).GetBlockTraces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Eth_GetBlockTraces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthServer).GetBlockTraces(ctx, req.(*BlockId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Eth_GetTrace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTraceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthServer).GetTrace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Eth_GetTrace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthServer).GetTrace(ctx, req.(*GetTraceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Eth_ServiceDesc is the grpc.ServiceDesc for Eth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Eth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Eth",
	HandlerType: (*EthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlock",
			Handler:    _Eth_GetBlock_Handler,
		},
		{
			MethodName: "GetBlockTransactionCount",
			Handler:    _Eth_GetBlockTransactionCount_Handler,
		},
		{
			MethodName: "GetTransactionByHash",
			Handler:    _Eth_GetTransactionByHash_Handler,
		},
		{
			MethodName: "GetTransactionByIndex",
			Handler:    _Eth_GetTransactionByIndex_Handler,
		},
		{
			MethodName: "GetTransactionReceipt",
			Handler:    _Eth_GetTransactionReceipt_Handler,
		},
		{
			MethodName: "GetBlockReceipts",
			Handler:    _Eth_GetBlockReceipts_Handler,
		},
		{
			MethodName: "GetTransactionTraces",
			Handler:    _Eth_GetTransactionTraces_Handler,
		},
		{
			MethodName: "GetBlockTraces",
			Handler:    _Eth_GetBlockTraces_Handler,
		},
		{
			MethodName: "GetTrace",
			Handler:    _Eth_GetTrace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eth.proto",
}
